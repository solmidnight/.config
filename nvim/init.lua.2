-- Secrets
vim.g.claude_api_key = os.getenv('ANTHROPIC_API_KEY')

-- Set keymap leader
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

-- Enable modelines
vim.cmd [[set modeline]]

-- Enable nerd font glyphs and icons
vim.g.have_nerd_font = true

-- [[ Setting options ]]

-- Enable filetype plugins and indenting
vim.cmd [[filetype plugin indent on]]

-- Enable syntax highlighting
vim.cmd [[syntax enable]]

-- Set guicursor
vim.cmd [[set guicursor=a:blinkon1]]
vim.cmd [[set guifont=Fira-Code]]

-- Set shell
vim.opt.shell = '/bin/zsh'

-- Swap files
vim.opt.swapfile = true

-- Buffers
vim.opt.hidden = true

-- Encoding
vim.opt.fileencoding = 'utf-8'

-- Spelling
vim.opt.spell = true
vim.opt.spelllang = 'en_us'

-- Set relative line numbers on
vim.opt.number = true
vim.opt.relativenumber = true

-- Colour column lines
vim.cmd.hi 'Comment gui=none'

-- Set forced line lengths and wrapping rules
vim.opt.textwidth = 100 -- absolute maximum
vim.opt.formatoptions = 'tcro/n1]jplj' -- :help fo-table

-- Enable mouse mode
vim.opt.mouse = 'a'

-- Don't show the mode, it's in the status line
vim.opt.showmode = true

-- Enable break indent
vim.opt.breakindent = true

-- Configure tab settings
vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.smarttab = true
vim.opt.cindent = true
vim.opt.autoindent = true
vim.cmd [[set expandtab]]

-- Save undo history
vim.opt.undofile = true

-- Keep signcolumn on by default
vim.opt.signcolumn = 'yes'

-- Decrease update time
vim.opt.updatetime = 150

-- Decrease mapped sequence wait time
-- Displays which-key popup sooner
vim.opt.timeoutlen = 300

-- Configure how new splits should be opened
vim.opt.splitright = true
vim.opt.splitbelow = true

-- Sets how neovim will display certain whitespace characters in the editor.
vim.opt.list = true
vim.opt.listchars = { tab = '¬ª ', trail = '¬∑', nbsp = '‚ê£' }

-- Preview substitutions live, as you type!
vim.opt.inccommand = 'split'

-- Show which line your cursor is on
vim.opt.cursorline = true

-- Minimal number of screen lines to keep above and below the cursor.
vim.opt.scrolloff = 5
if not vscode then

local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
if not vim.uv.fs_stat(lazypath) then
  local lazyrepo = 'https://github.com/folke/lazy.nvim.git'
  local out = vim.fn.system { 'git', 'clone', '--filter=blob:none', '--branch=stable', lazyrepo, lazypath }
  if vim.v.shell_error ~= 0 then
    error('Error cloning lazy.nvim:\n' .. out)
  end
end ---@diagnostic disable-next-line: undefined-field
vim.opt.rtp:prepend(lazypath)

-- [[ Configure and install plugins ]]

require('lazy').setup({
  {
  'stevearc/conform.nvim',
  opts = {},
},
{
    'MeanderingProgrammer/render-markdown.nvim',
    dependencies = { 'nvim-treesitter/nvim-treesitter', 'echasnovski/mini.nvim' }, -- if you use the mini.nvim suite
    -- dependencies = { 'nvim-treesitter/nvim-treesitter', 'echasnovski/mini.icons' }, -- if you use standalone mini plugins
    -- dependencies = { 'nvim-treesitter/nvim-treesitter', 'nvim-tree/nvim-web-devicons' }, -- if you prefer nvim-web-devicons
    ---@module 'render-markdown'
    ---@type render.md.UserConfig
    opts = {},
},
  {
  'mrcjkb/rustaceanvim',
  version = '^5', -- Recommended
  lazy = false, -- This plugin is already lazy
},

{ -- Useful plugin to show you pending keybinds.
    'folke/which-key.nvim',
    event = 'VimEnter',
    keys = {
      {
        '<leader>?',
        function()
          require('which-key').show { global = false }
        end,
        desc = 'Buffer Local Keymaps (which-key)',
      },
    },
    config = function()
      require('which-key').setup()

      -- Document existing key chains
      require('which-key').add {
        { '<leader>c', group = '[C]ode' },
        { '<leader>d', group = '[D]ocument' },
        { '<leader>r', group = '[R]ename' },
        { '<leader>s', group = '[S]earch' },
        { '<leader>w', group = '[W]orkspace' },
        { '<leader>t', group = '[T]oggle' },
        { '<leader>h', group = 'Git [H]unk', mode = { 'n', 'v' } },
      }
    end,
  },
  {
    'nvim-telescope/telescope.nvim', tag = '0.1.8',
-- or                              , branch = '0.1.x',
      dependencies = { 'nvim-lua/plenary.nvim' }
  },
{ "catppuccin/nvim", name = "catppuccin", priority = 1000 },
{
    'nvim-lualine/lualine.nvim',
    dependencies = { 'nvim-tree/nvim-web-devicons' },
    config = function()
      require('lualine').setup({
        sections = {
            lualine_x = { "encoding", { "fileformat", symbols = { unix = "Óúë" } }, "filetype" },
          },
      })
    end,
  },

  { 'https://github.com/ap/vim-buftabline' },
}, {
  ui = {
    icons = vim.g.have_nerd_font and {} or {
      cmd = '‚åò',
      config = 'üõ†',
      event = 'üìÖ',
      ft = 'üìÇ',
      init = '‚öô',
      keys = 'üóù',
      plugin = 'üîå',
      runtime = 'üíª',
      require = 'üåô',
      source = 'üìÑ',
      start = 'üöÄ',
      task = 'üìå',
      lazy = 'üí§ ',
    },
  },
})

require("conform").setup({
  format_on_save = {
    -- These options will be passed to conform.format()
    timeout_ms = 500,
    lsp_format = "fallback",
  },
})
-- Telescope
local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<leader>fw', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })
vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Telescope help tags' })
-- Neocodium
vim.keymap.set("i", "<A-TAB>", function()
    require("neocodeium").accept()
end)


-- Setup markdown plugin
require('render-markdown').setup({})

-- Setup theme
require("catppuccin").setup({
  transparent_background = true
})
vim.cmd.colorscheme "catppuccin"
end

-- Jump with or without consideration for wrap
vim.keymap.set('n', 'j', 'gj', { silent = true })
vim.keymap.set('n', 'k', 'gk', { silent = true })

-- Basic capitalisation errors
vim.keymap.set('c', 'W', 'w')

-- Redo
vim.keymap.set('n', 'r', ':redo<CR>')

-- Toggle Diagnostics
vim.keymap.set('n', '<leader>td', function()
  vim.diagnostic.enable(not vim.diagnostic.is_enabled())
end, { silent = true, noremap = true })

-- Split
vim.keymap.set('n', '<leader>he', ':Vexplore<CR>')
vim.keymap.set('n', '<leader>ve', ':Hexplore<CR>')
vim.keymap.set('n', '<leader>ht', ':Vexplore<CR>:terminal<CR>')
vim.keymap.set('n', '<leader>vt', ':Hexplore<CR>:terminal<CR>')

-- Yank into and paste from the system clipboard
vim.keymap.set('n', '<leader>cy', '"+y')
vim.keymap.set('v', '<leader>cy', '"+y')
vim.keymap.set('n', '<leader>cp', '"+p')
vim.keymap.set('n', '<leader>cP', '"+P')
vim.keymap.set('v', '<leader>cp', '"+p')
vim.keymap.set('v', '<leader>cP', '"+P')

-- Resize current window
vim.keymap.set('n', '+', '<CMD>vertical resize +5<CR>')
vim.keymap.set('n', '_', '<CMD>vertical resize -5<CR>')
vim.keymap.set('n', '=', '<CMD>horizontal resize +5<CR>')
vim.keymap.set('n', '-', '<CMD>horizontal resize -5<CR>')

--Split
vim.keymap.set('n', '<leader>h', ':Vexplore<CR>')
vim.keymap.set('n', '<leader>v', ':Hexplore<CR>')

--Terminal
vim.keymap.set('n', '<leader>t', ':terminal<CR>')


-- Move buffers
vim.keymap.set('n', '<leader>bn', ':bnext<CR>')
vim.keymap.set('n', '<C-n>', ':bnext<CR>')
vim.keymap.set('n', '<leader>bp', ':bprev<CR>')
vim.keymap.set('n', '<C-p>', ':bprev<CR>')

-- Close the current window and buffer
vim.keymap.set('n', '<leader>cx', ':close<CR>')
vim.keymap.set('n', '<leader>bx', ':bdelete!<CR>')
-- Clear highlights on search when pressing <Esc> in normal mode
vim.keymap.set('n', '<Esc>', '<cmd>nohlsearch<CR>')

-- Explore
vim.keymap.set('n', '<leader>e', ':Explore<CR>')

-- Code action
vim.keymap.set('n', '<leader>s', ':RustLsp codeAction<CR>')



-- vim: ts=2 sts=2 sw=2 et
